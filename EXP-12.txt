1)class Animal:
    def sound(self):
        pass
class Cat(Animal):
    def sound(self):
        print("MEOW")
class Dog(Animal):
    def sound (self):
        print("WOOF")
def make_sound(animal):
    animal.sound()
cat=Cat()
dog=Dog()
make_sound(cat)
make_sound(dog)
        
output:
      
MEOW
WOOF

2)class shape:
    def __init__(self,color):
        self.color=color
    def area(self):
        pass
class circle(shape):
    def __init__(self,color,radius):
        super().__init__(color)
        self.radius=radius
    def area(self):
        return 3.14*self.radius**2
class Rectangle(shape):
    def __init__(self,color,width,height):
        super().__init__(color)
        self.width=width
        self.height=height
    def area(self):
        return self.width*self.height
circle=circle("Red",7)
rectangle=Rectangle("Blue",7,8)
print("circle area:",circle.area())
print("Rectangle area:",rectangle.area())

OUTPUT:

circle area: 153.86
Rectangle area: 56

3)class MyClass:
    def __init__(self):
        self.public_attribute="I'm a public attribute"
        self._protected_attribute="I'm a protected attribute"
        self.__private_attribute="I'm a private attribute"
    def public_method(self):
        print("I'm a public method")
    def _protected_method(self):
        print("I'm a protected method")
    def __private_method(self):
        print("I'm a private method")
obj=MyClass()
print(obj.public_attribute)
obj.public_method()
print(obj._protected_attribute)
obj._protected_method()
print(obj._MyClass__private_attribute)
obj._MyClass__private_method()

OUTPUT:       
I'm a public attribute
I'm a public method
I'm a protected attribute
I'm a protected method
I'm a private attribute
I'm a private method


4)
class BankAccount:
    def __init__(self, account_number, balance):
        self._account_number = account_number
        self._balance = balance

    def get_account_number(self):
        return self._account_number
    def get_balance(self):
        return self._balance
    def deposit(self, amount):
        if amount> 0:
            self._balance += amount
            print("Deposit successful.")
        else:
            print("Invalid amount for deposit.")

    def withdraw(self, amount):
        if amount> 0 and amount<= self._balance:
            self._balance -= amount
            print("Withdrawal successful.")
        else:
            print("Insufficient funds or invalid amount for withdrawal.")
account = BankAccount("1234567890",1000)
print("Account Number:", account.get_account_number())
print("Balance:", account.get_balance())
account.deposit(500)
account.withdraw(200)
account._account_number ="9876543210"
account._balance = 5000
print("Account Number:", account.get_account_number())
print("Balance:", account.get_balance())


OUTPUT:

Account Number: 1234567890
Balance: 1000
Deposit successful.
Withdrawal successful.
Account Number: 9876543210
Balance: 5000
